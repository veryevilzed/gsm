package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/veryevilzed/gsm"
)

const (
	PORT             = "/dev/cu.usbserial-2120" // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–æ—Ä—Ç
	BAUD_RATE        = 9600
	MAX_MESSAGES     = 5
	CHECK_INTERVAL   = 2 * time.Second
	CLEANUP_INTERVAL = 30 * time.Second
)

func main() {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ–¥–µ–º—É
	fmt.Printf("Connecting to modem at %s...\n", PORT)
	modem, err := gsm.New(PORT, BAUD_RATE)
	if err != nil {
		log.Fatal("Failed to connect:", err)
	}
	defer modem.Close()
	fmt.Println("‚úì Connected")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
	if err := modem.TestConnection(); err != nil {
		log.Fatal("Connection test failed:", err)
	}

	// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º—ã —É–∂–µ –≤–∏–¥–µ–ª–∏
	seenMessages := make(map[int]bool)
	var mu sync.Mutex

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	go func() {
		ticker := time.NewTicker(CHECK_INTERVAL)
		defer ticker.Stop()

		fmt.Println("\nüì± Monitoring SMS... (check every 2 seconds)")
		fmt.Println(strings.Repeat("-", 50))

		for range ticker.C {
			// –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
			unread, err := modem.ListUnreadSMS()
			if err != nil {
				continue // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			for _, sms := range unread {
				mu.Lock()
				if !seenMessages[sms.Index] {
					seenMessages[sms.Index] = true
					mu.Unlock()

					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
					fmt.Printf("\nüîî NEW SMS from %s:\n", sms.Sender)
					fmt.Printf("   %s\n", sms.Text)
					fmt.Printf("   [Time: %s, Index: %d]\n",
						sms.Time.Format("15:04:05"), sms.Index)

					// –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
					modem.MarkSMSAsRead(sms.Index)
				} else {
					mu.Unlock()
				}
			}
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	go func() {
		ticker := time.NewTicker(CLEANUP_INTERVAL)
		defer ticker.Stop()

		for range ticker.C {
			// –°—á–∏—Ç–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
			all, err := modem.ListSMS("ALL")
			if err != nil {
				continue
			}

			// –ï—Å–ª–∏ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞ - —á–∏—Å—Ç–∏–º
			if len(all) > MAX_MESSAGES {
				fmt.Printf("\nüßπ Cleaning up (total: %d, max: %d)...\n",
					len(all), MAX_MESSAGES)

				// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
				read, _ := modem.ListReadSMS()
				deleteCount := len(all) - MAX_MESSAGES
				deleted := 0

				for _, sms := range read {
					if deleted >= deleteCount {
						break
					}
					if modem.DeleteSMS(sms.Index) == nil {
						deleted++
						mu.Lock()
						delete(seenMessages, sms.Index)
						mu.Unlock()
					}
				}

				fmt.Printf("   Deleted %d messages\n", deleted)
			}
		}
	}()

	// –ñ–¥–µ–º Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)
	<-sigChan

	fmt.Println("\n\nüëã SMS Monitor stopped")
}
